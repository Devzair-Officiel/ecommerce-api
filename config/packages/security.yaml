security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User\User
                property: email
    firewalls:
        login:
            pattern: ^/api/v1/login
            stateless: true
            login_throttling:
                max_attempts: 10
            json_login:
                check_path: /api/v1/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            jwt: ~

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # main:
        #     lazy: true
        #     provider: users_in_memory

     # Contrôle d'accès par route
    access_control:
        # Routes publiques (pas de JWT requis)
        - { path: ^/api/auth/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/forgot-password, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/reset-password, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/verify-email, roles: PUBLIC_ACCESS }
        
        # Routes publiques catalogue (lecture seule)
        - { path: ^/api/products, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/categories, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/sites, roles: PUBLIC_ACCESS, methods: [GET] }
        
        # Routes nécessitant authentification
        - { path: ^/api/cart, roles: ROLE_USER }
        - { path: ^/api/orders, roles: ROLE_USER }
        - { path: ^/api/profile, roles: ROLE_USER }
        - { path: ^/api/addresses, roles: ROLE_USER }
        - { path: ^/api/reviews, roles: ROLE_USER }
        
        # Routes admin
        - { path: ^/api/admin, roles: ROLE_ADMIN }
        
        # Tout le reste nécessite authentification par défaut
        - { path: ^/api, roles: ROLE_USER }

    # Hiérarchie des rôles
    role_hierarchy:
        ROLE_MODERATOR: ROLE_USER
        ROLE_ADMIN: [ROLE_MODERATOR, ROLE_USER]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_MODERATOR, ROLE_USER]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
